Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação:\n\n**CalcServiceTest.java**\n\nimport org.junit.jupiter.api.Test;\nimport org.pitest.mutationtest.engine.gregor.Mutator;\n\npublic class CalcServiceTest {\n\n    @Test\n    public void testIsPar_MutationDetected() {\n        // Cria uma instância da classe alvo\n        CalcService calcService = new CalcService();\n\n        // Executa o método com a mutação\n        boolean result = calcService.isPar(4); // isPar é o método que está sendo testado\n\n        // Verifica se o resultado é verdadeiro (o que não deve acontecer)\n        assert !result;\n    }\n}\n\n**Explicação**\n\n* O teste `testIsPar_MutationDetected` verifica se a mutação detectada no método `isPar` da classe `CalcService` está funcionando corretamente.\n* A instância da classe alvo é criada e o método `isPar` é executado com um parâmetro (4, por exemplo).\n* O resultado do método é verificado para ser falso (ou seja, não par). Se a mutação estiver funcionando corretamente, o resultado deve ser verdadeiro.\n* O assert `!result` verifica se o resultado é falso. Se for verdadeiro, significa que a mutação está funcionando e o teste falhou.\n\nLembre-se de que este teste apenas detecta a presença da mutação e não verifica se o método `isPar` está funcionando corretamente em geral.