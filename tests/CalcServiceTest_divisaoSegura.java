Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação:\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CalcServiceTest {\n\n    @Test\n    public void testDivisaoSegura_Mutacao() {\n        // Cria uma instância da classe alvo\n        CalcService calcService = new CalcService();\n\n        // Chama o método com a mutação\n        int result = calcService.divisaoSegura(10, 2);\n\n        // Verifica se o resultado é diferente de zero (indicando que a mutação foi detectada)\n        assertEquals(0, result);\n    }\n}\n\n\nEste teste cria uma instância da classe `CalcService` e chama o método `divisaoSegura` com os parâmetros 10 e 2. Em seguida, verifica se o resultado é igual a zero, o que indica que a mutação foi detectada.\n\nLembre-se de que a mutação substituiu o valor de retorno do método `divisaoSegura` por zero, portanto, esperamos que o teste retorne zero. Se o teste não retorne zero, significa que a mutação não foi detectada e o código original está funcionando corretamente.\n\nPara executar este teste, você precisará ter JUnit5 instalado em seu projeto Java. Além disso, certifique-se de que a classe `CalcService` esteja configurada para ser testada com a mutação especificada (neste caso, `org.pitest.mutationtest.engine.gregor.mutators.returns.PrimitiveReturnsMutator`).