Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação no método `max` da classe `CalcService`:\n\nimport org.junit.jupiter.api.Test;\nimport org.pitest.mutationtest.engine.gregor.Mutator;\n\npublic class CalcServiceTest {\n\n    @Test\n    public void testMaxMutation() {\n        // Criar uma instância da classe alvo\n        CalcService calcService = new CalcService();\n\n        // Executar o método original\n        int resultOriginal = calcService.max(1, 2);\n\n        // Verificar se o resultado é diferente de 0 (mutação)\n        assert(resultOriginal != 0);\n\n        // Criar um mutador para simular a mutação\n        Mutator primitiveReturnsMutator = new PrimitiveReturnsMutator();\n\n        // Simular a mutação no método max\n        int resultMutated = primitiveReturnsMutator.apply(calcService::max, 1, 2);\n\n        // Verificar se o resultado da mutação é igual a 0 (mutação)\n        assert(resultMutated == 0);\n    }\n}\n\nEste teste verifica se a mutação no método `max` da classe `CalcService` substituiu o valor de retorno por 0. O método original é executado e seu resultado é verificado para ser diferente de 0. Em seguida, um mutador é criado para simular a mutação e o resultado da mutação é verificado para ser igual a 0.\n\nLembre-se de que este teste está supondo que a classe `CalcService` tem um método `max` que retorna um valor inteiro. Além disso, o pacote `org.pitest.mutationtest.engine.gregor` e a classe `PrimitiveReturnsMutator` devem ser adicionados ao seu projeto para que o teste funcione corretamente.