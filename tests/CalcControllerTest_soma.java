Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação:\n\n**CalcControllerTest.java**\n\nimport org.junit.jupiter.api.Test;\nimport org.pitest.mutationtest.engine.gregor.Mutator;\n\npublic class CalcControllerTest {\n\n    @Test\n    public void testSoma_MutationDetected() {\n        // Cria um objeto da classe alvo\n        CalcController calcController = new CalcController();\n\n        // Executa o método com a mutação aplicada\n        Map\u003cString, Object\u003e result = (Map\u003cString, Object\u003e) Mutator.apply(calcController::soma, \mutated\        // Verifica se o resultado é diferente do esperado\n        assertThrows(NullPointerException.class, () -\u003e {\n            // Tente acessar um valor do mapa que não existe\n            String value = (String) result.get(\non-existent-key\        });\n    }\n}\n\nExplicação:\n\n* O teste `testSoma_MutationDetected` é anotado com `@Test`, indicando que é um teste unitário.\n* Cria-se um objeto da classe alvo `CalcController`.\n* Aplica-se a mutação ao método `soma` utilizando o mutator `org.pitest.mutationtest.engine.gregor.mutators.returns.EmptyObjectReturnValsMutator`. Isso substitui o valor de retorno do método por uma instância vazia de `Map\u003cString, Object\u003e`.\n* Executa-se o método com a mutação aplicada e armazena-se o resultado em uma variável.\n* Verifica-se se o resultado é diferente do esperado. Nesse caso, estamos testando se o mapa retornado é nulo ou vazio, pois a mutação substituiu o valor de retorno por uma instância vazia de `Map`.\n* Tente-se acessar um valor do mapa que não existe, o que deve causar uma exceção `NullPointerException`. Isso indica que a mutação detectou e o teste falhou.\n\nLembre-se de que este é apenas um exemplo e que o teste pode precisar ser adaptado para atender às necessidades específicas da sua aplicação.