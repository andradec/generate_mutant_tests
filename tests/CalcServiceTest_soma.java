Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação:\n\n**CalcServiceTest.java**\n\nimport org.junit.jupiter.api.Test;\nimport org.pitest.mutationtest.engine.gregor.Mutator;\nimport org.pitest.mutationtest.engine.gregor.Mutators;\n\npublic class CalcServiceTest {\n\n    @Test\n    public void testSoma_Mutation() {\n        CalcService calcService = new CalcService();\n        Mutator mutator = Mutators.RETURN_PRIMITIVE.getMutator();\n\n        // Execute ação para aplicar a mutação\n        calcService.soma(2, 3); // Original behavior\n\n        // Verificar se o método soma está retornando 0 (mutação)\n        int result = calcService.soma(1, 1);\n        assertNotEquals(5, result); // Espera-se que o resultado seja diferente de 5\n    }\n}\n\nExplicação:\n\n* Importamos as classes necessárias do JUnit5 e da biblioteca Pitest (org.pitest.mutationtest.engine.gregor.Mutator e org.pitest.mutationtest.engine.gregor.Mutators).\n* Criamos um teste chamado `testSoma_Mutation`.\n* Instanciamos a classe `CalcService` e o mutador de retorno primitivo (`Mutators.RETURN_PRIMITIVE.getMutator()`).\n* Executamos a ação para aplicar a mutação, que é chamar o método `soma` com os parâmetros originais (2 e 3). Isso não afeta o resultado do teste.\n* Verificamos se o método `soma` está retornando 0 (mutação) chamando-o novamente com novos parâmetros (1 e 1).\n* Utilizamos a assertação `assertNotEquals(5, result)` para verificar se o resultado é diferente de 5. Se o resultado for 0 (mutação), o teste falhará.\n\nLembre-se de que este teste não está testando a lógica do método `soma`, mas sim detectando a mutação.