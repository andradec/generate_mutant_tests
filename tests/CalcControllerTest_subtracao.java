Aqui está um exemplo de como criar um teste unitário em Java usando JUnit5 para detectar a mutação:\n\n**CalcControllerTest.java**\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CalcControllerTest {\n\n    @Test\n    public void testSubtracao_MutationDetected() {\n        // Criar uma instância da classe alvo\n        CalcController calcController = new CalcController();\n\n        // Chamada do método subtracao com parâmetros válidos\n        Map\u003cString, Integer\u003e result = calcController.subtracao(10, 5);\n\n        // Verificar se a chamada original não está modificando o resultado\n        assertEquals(new HashMap\u003c\u003e(), result); // A substituição de valor de retorno é detectada aqui\n\n        // Verificar se a mutação está ocorrendo\n        Map\u003cString, Integer\u003e mutatedResult = calcController.subtracao(10, 5);\n        assertEquals(Collections.emptyMap(), mutatedResult); // O resultado da chamada com a mutação deve ser Collections.emptyMap()\n    }\n}\n\nNesse teste, estamos criando uma instância da classe `CalcController` e chamando o método `subtracao` com parâmetros válidos. Em seguida, estamos verificando se a chamada original não está modificando o resultado.\n\nEm seguida, estamos chamando novamente o método `subtracao` com a mesma entrada, mas agora com a mutação aplicada (replaced return value with Collections.emptyMap). Nesse caso, esperamos que o resultado seja `Collections.emptyMap()`.\n\nSe a mutação estiver ocorrendo corretamente, o teste deve passar. Caso contrário, o teste falhará e indicará que a mutação não está ocorrendo como esperado.